{"version":3,"sources":["ui/Dropdown/Dropdown.tsx","ui/Slider/Slider.tsx","ui/SliderSection/SliderSection.tsx","ascii-utils.tsx","video/process-video.ts","ui/Menu/DragDropFiles.tsx","ui/Menu/Menu.tsx","video/asciiVideo.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Dropdown","label","options","selectedOption","onOptionChange","className","onChange","option","value","styles","control","baseStyles","state","minHeight","alignItems","width","menuIsOpen","borderRadius","padding","dropdownIndicator","input","components","IndicatorSeparator","menuPosition","find","Slider","title","min","max","step","disabled","Error","normalizedValue","Math","floor","leftDashes","repeat","rightDashes","type","e","parseFloat","target","SliderSection","specs","onSpecsChange","onResolutionChange","contrast","onContrastChange","resolution","toString","slice","newContrast","newZoom","zoom","newWeight","weight","newKerning","kerning","getAsciiFromContext","context","asciiChars","inverse","imageData","getImageData","canvas","height","greyscale","getGreyscale","ascii","getAsciiFromGreyscale","data","pixels","y","greyscaleRow","x","pixelIndex","luminance","push","length","contrastedLuminance","asciiIndex","processVideoFrames","video","palette","asciiResolution","isColorInverted","onVideoFramesChange","Promise","resolve","onloadedmetadata","document","createElement","getContext","willReadFrequently","frames","aspectRatio","videoWidth","videoHeight","processFrame","drawImage","frameAscii","paused","ended","currentTime","duration","setTimeout","play","addEventListener","onCanPlay","toBlob","blob","file","File","removeEventListener","readyState","dispatchEvent","Event","DragDropFiles","children","onDrop","preventDefault","stopPropagation","dataTransfer","files","onDragOver","ASCIICHARS","asciiOptions","map","char","Menu","onCopy","onImageUpload","onVideoUpload","onPaletteChange","onColorInvertedToggle","isVideoEditMode","onClickGenerateVideo","imageUploadHandler","imageFile","heic2any","toType","then","convertedBlob","convertedFile","name","replace","error","console","htmlFor","id","accept","event","myFile","videoFile","Fonts","font","fontFamily","checked","onClick","MenuContainer","props","onAsciiChange","React","useState","currentFile","setCurrentFile","isAsciiVideo","setIsAsciiVideo","selectedPalette","setSelectedPalette","setInvert","setContrast","videoForEditMode","setVideoForEditMode","useRef","setLoadingState","isVideo","updateAscii","resetLookups","src","URL","createObjectURL","settings","maxWidth","reader","FileReader","image","Image","ok","no","match","onload","readerEvent","maxHeight","resize","result","readAsDataURL","resizeImage","current","newAscii","debouncedOnResolutionChange","debounce","debouncedOnContrastChange","getFirstFrameOfVideoAsImageFile","newPalette","Boolean","undefined","AsciiVideo","asciiFrames","frameRate","currentFrameIndex","setCurrentFrameIndex","useEffect","interval","setInterval","prevIndex","clearInterval","App","setAscii","fontSize","lineHeight","setSpecs","log","navigator","clipboard","writeText","JSON","stringify","style","fontWeight","letterSpacing","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.efaa908e.chunk.js","sourcesContent":["import React from 'react';\nimport CreatableSelect from 'react-select/creatable';\n\ninterface DropdownProps<T> {\n    label: string;\n    options: {\n        value: T;\n        label: T;\n    }[];\n    selectedOption: T;\n    onOptionChange: (option: T) => void;\n}\n\nconst Dropdown = <T,>({\n    label,\n    options,\n    selectedOption,\n    onOptionChange,\n}: DropdownProps<T>): JSX.Element => {\n    return (\n        <div className=\"menu-entry\">\n            <div className=\"menu-entry-label\">{label}:</div>\n            <CreatableSelect\n                options={options}\n                className=\"dropdown\"\n                onChange={(option) => onOptionChange(option?.value || options[0].value)}\n                styles={{\n                    control: (baseStyles, state) => ({\n                        ...baseStyles,\n                        minHeight: '5px !important',\n                        alignItems: 'baseline',\n                        width: state.menuIsOpen ? '200px' : '100px',\n                        borderRadius: '2px',\n                        padding: '0px',\n                    }),\n                    dropdownIndicator: (baseStyles, state) => ({\n                        ...baseStyles,\n                        padding: '0px',\n                    }),\n                    input: (baseStyles, state) => ({\n                        ...baseStyles,\n                        padding: '0px',\n                    }),\n                }}\n                components={{ IndicatorSeparator: () => null }}\n                menuPosition=\"fixed\"\n                value={options.find((option) => option.value === selectedOption)}\n            />\n        </div>\n    );\n};\n\nexport default Dropdown;\n","import React from 'react';\n\ninterface SliderProps {\n    title: string;\n    onChange: (newValue: number) => void;\n    label: string;\n    // eslint-disable-next-line\n    value: any;\n    min: number;\n    max: number;\n    step?: number;\n    disabled?: boolean;\n}\n\nexport const Slider: React.FC<SliderProps> = ({\n    title,\n    onChange,\n    label,\n    value,\n    min,\n    max,\n    step,\n    disabled,\n}) => {\n    const sliderLength = 10;\n    if (value > max || value < min) {\n        throw new Error(`value ${value} is outside of range ${min} to ${max}`);\n    }\n\n    const normalizedValue = Math.floor(((value - min) / (max - min)) * sliderLength);\n\n    const leftDashes = '-'.repeat(normalizedValue);\n    const rightDashes = '-'.repeat(sliderLength - normalizedValue);\n\n    return (\n        <div className=\"slidecontainer\">\n            <p>{title}</p>\n            <div className=\"slider-track\">\n                <input\n                    type=\"range\"\n                    min={min}\n                    max={max}\n                    step={step}\n                    value={value}\n                    onChange={(e) => onChange(parseFloat(e.target.value))}\n                    disabled={disabled}\n                    className=\"slider-input\"\n                />\n                {`<`}\n                <span className=\"slider-dashes\">{leftDashes}</span>\n                <span className=\"slider-asterix\">*</span>\n                <span className=\"slider-dashes\">{rightDashes}</span>\n                {`>`}\n                {/* <output>{value}</output> */}\n            </div>\n        </div>\n    );\n};\n","import { Slider } from '../Slider/Slider';\nimport React from 'react';\nimport { SpecsState } from '../../App';\nimport { on } from 'events';\n\nexport const SliderSection: React.FC<{\n    specs: SpecsState;\n    onSpecsChange: (specs: SpecsState) => void;\n    onResolutionChange: (resolution: number) => void;\n    contrast: number;\n    onContrastChange: (contrast: number) => void;\n}> = ({ specs, onSpecsChange, onResolutionChange, contrast, onContrastChange }) => {\n    // TODO: consider using an exponential scale for resolution\n    return (\n        <>\n            <Slider\n                title={'resolution:'}\n                onChange={(resolution) => {\n                    onResolutionChange(resolution);\n                }}\n                value={specs.resolution}\n                min={5}\n                max={500}\n                label={specs.resolution.toString().slice(0, 5)}\n            />\n\n            <Slider\n                title={'contrast:'}\n                onChange={(newContrast) => {\n                    onContrastChange(newContrast);\n                }}\n                value={contrast}\n                min={0.1}\n                max={50}\n                step={0.1}\n                label={contrast.toString()}\n            />\n\n            <Slider\n                title={'zoom:'}\n                onChange={(newZoom) => {\n                    onSpecsChange({ ...specs, zoom: newZoom });\n                }}\n                value={specs.zoom}\n                min={1}\n                max={10}\n                step={0.25}\n                label={specs.zoom.toString().slice(0, 4)}\n            />\n            <Slider\n                title={'font weight:'}\n                onChange={(newWeight) => {\n                    onSpecsChange({ ...specs, weight: newWeight });\n                }}\n                value={specs.weight}\n                min={0}\n                max={800}\n                label={specs.weight.toString()}\n            />\n\n            <Slider\n                title={'kerning:'}\n                onChange={(newKerning) => {\n                    onSpecsChange({ ...specs, kerning: newKerning });\n                }}\n                value={specs.kerning}\n                min={-10}\n                max={10}\n                label={specs.kerning.toString()}\n            />\n            {/* <Slider\n                title={'line height:'}\n                onChange={(newLineHeight) => {\n                    onSpecsChange({ ...specs, lineHeight: newLineHeight });\n                }}\n                value={specs.lineHeight}\n                min={0.1}\n                max={200}\n                step={0.1}\n                label={specs.lineHeight.toString()}\n            /> */}\n        </>\n    );\n};\n","// const asciiChars = '+::`..';\n// const asciiChars =\n//     '$@WgBMQNR8%0&đD#OGKEHdbmSqpAPwU54ZX96f23kVhaeFCj1IoJyst7}{YnulzriTx?][*Lcv×<>)(/+=÷“”!;:‘,’-.';\n\n// const asciiChars = '▓▒▒░░';\n// const asciiChars = ['8 ', 'M ', '0 ', '# ', '$ ', '| ', '* ', '+ ', ': ', ': ', '` ', '. ', '. '];\n\n// const asciiChars = '$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~<>i!lI;:,\"^`\\'.';\n// const asciiChars = '+-:`  ';\n['8 ', 'M ', '0 ', '# ', '$ ', '| ', '* ', '+ ', ': ', ': ', '` ', '. ', '. '];\n\n// export const ASCIICHARS = [\n//     '8M0|*|::`,.',\n//     '+::`..',\n//     '+-:`  ',\n//     '▓▒▒░░',\n//     '$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~<>i!lI;:,\"^`\\'.',\n//     '$@WgBMQNR8%0&đD#OGKEHdbmSqpAPwU54ZX96f23kVhaeFCj1IoJyst7}{YnulzriTx?][*Lcv×<>)(/+=÷“”!;:‘,’-.',\n// ];\n\n// const asciiChars = '8M0#$|*|::`,.';\n// const asciiChars = '#8?0+:.,';\n// const asciiChars = '8#|:.';\n\nexport const getAsciiFromContext = (\n    context: CanvasRenderingContext2D,\n    asciiChars: string | string[],\n    inverse = false,\n    contrast?: number,\n): string => {\n    const imageData = context.getImageData(0, 0, context.canvas.width, context.canvas.height);\n    const greyscale = getGreyscale(imageData);\n    const ascii = getAsciiFromGreyscale(greyscale, asciiChars, inverse, contrast);\n    return ascii;\n};\n\nexport const getGreyscale = (data: ImageData): number[][] => {\n    const pixels = data.data;\n\n    const greyscale = [];\n    for (let y = 0; y < data.height; y++) {\n        const greyscaleRow = [];\n        for (let x = 0; x < data.width; x++) {\n            const pixelIndex = (y * data.width + x) * 4;\n            // perceived luminance acccording to https://en.wikipedia.org/wiki/Relative_luminance\n            const luminance =\n                0.2126 * pixels[pixelIndex] +\n                0.7152 * pixels[pixelIndex + 1] +\n                0.0722 * pixels[pixelIndex + 2];\n\n            greyscaleRow.push(luminance);\n        }\n        greyscale.push(greyscaleRow);\n    }\n    return greyscale;\n};\n\nexport const getAsciiFromGreyscale = (\n    greyscale: number[][],\n    asciiChars: string | string[],\n    inverse = false,\n    contrast?: number,\n): string => {\n    let ascii = '';\n\n    // iterate over each row, and each pixel in the row\n    for (let y = 0; y < greyscale.length; y++) {\n        for (let x = 0; x < greyscale[y].length; x++) {\n            const luminance = greyscale[y][x];\n\n            const contrastedLuminance = contrast\n                ? Math.max(Math.min((luminance - 127.5) * contrast, 255), 0)\n                : luminance;\n\n            const asciiIndex = Math.floor((contrastedLuminance / 255) * (asciiChars.length - 1));\n            if (inverse) {\n                ascii += asciiChars[asciiChars.length - asciiIndex - 1];\n            } else {\n                ascii += asciiChars[asciiIndex];\n            }\n        }\n        ascii += '\\n';\n    }\n    return ascii;\n};\n\nconst resize = (image: HTMLImageElement, maxHeight: number, canvas: HTMLCanvasElement) => {\n    let width = image.width;\n    let height = image.height;\n\n    if (height > maxHeight) {\n        width *= maxHeight / height;\n        height = maxHeight;\n    }\n    // 0.6 because the ascii characters are taller than they are wide\n    height *= 0.6;\n\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext('2d');\n    context?.drawImage(image, 0, 0, width, height);\n    return canvas;\n};\n\ninterface IResizeImageOptions {\n    maxWidth: number;\n    file: File;\n}\n\n// Returns a Canvas with the image resized to be under MaxHeight\nexport const resizeImage = (settings: IResizeImageOptions): Promise<HTMLCanvasElement> => {\n    const file = settings.file;\n    const maxWidth = settings.maxWidth;\n    const reader = new FileReader();\n    const image = new Image();\n    const canvas = document.createElement('canvas');\n\n    return new Promise<HTMLCanvasElement>((ok, no) => {\n        if (!file.type.match(/image.*/)) {\n            no(new Error('Not an image'));\n            return;\n        }\n\n        reader.onload = (readerEvent: any) => {\n            image.onload = () => ok(resize(image, maxWidth, canvas));\n            image.src = readerEvent.target.result;\n        };\n        reader.readAsDataURL(file);\n    });\n};\n","import { getAsciiFromContext } from '../ascii-utils';\n\nexport const processVideoFrames = async (\n    video: HTMLVideoElement,\n    palette: string | string[],\n    asciiResolution: number,\n    isColorInverted: boolean,\n    onVideoFramesChange: (frame: string[]) => void,\n    contrast: number,\n) => {\n    // Wait for video metadata to load\n    await new Promise<void>((resolve) => {\n        video.onloadedmetadata = () => {\n            resolve();\n        };\n    });\n\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d', {\n        willReadFrequently: true,\n    });\n    if (!context || !video) return;\n\n    const frames: string[] = [];\n\n    const frameRate = 10; // Number of frames per second (adjust this based on performance)\n\n    // Calculate the width and height for processing based on the original video's aspect ratio\n    const aspectRatio = video.videoWidth / video.videoHeight;\n\n    const width = asciiResolution;\n    // 0.6 because the ascii characters are taller than they are wide\n    const height = (0.6 * width) / aspectRatio;\n\n    // Set the canvas dimensions to match the processing size\n    context.canvas.width = width;\n    context.canvas.height = height;\n\n    const processFrame = async () => {\n        context.drawImage(video, 0, 0, width, height);\n        const frameAscii = getAsciiFromContext(context, palette, isColorInverted, contrast);\n        frames.push(frameAscii);\n\n        if (!video.paused && !video.ended && !(video.currentTime >= video.duration)) {\n            setTimeout(processFrame, 1000 / frameRate);\n            video.currentTime += 1 / frameRate;\n        } else {\n            // Video processing is done\n            onVideoFramesChange(frames);\n        }\n    };\n\n    // Start video playback and frame processing\n    video.currentTime = 0;\n    await video.play();\n    processFrame();\n};\n\nexport async function getFirstFrameOfVideoAsImageFile(\n    video: HTMLVideoElement,\n): Promise<File | null> {\n    return new Promise((resolve) => {\n        // Create a canvas element\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n\n        if (!context) {\n            // Unable to get 2D context, return null\n            resolve(null);\n            return;\n        }\n\n        video.addEventListener('loadeddata', () => {\n            canvas.width = video.videoWidth;\n            canvas.height = video.videoHeight;\n\n            // TODO: this is called like 60 times, which might not be ideal.\n            // but it's the only what i can get the video to actuall show\n            // on the canvas\n            const onCanPlay = () => {\n                video.play();\n                video.currentTime = 0.001;\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n                // wait 2 seconds for good measure\n                setTimeout(() => {\n                    canvas.toBlob(async (blob) => {\n                        if (!blob) {\n                            resolve(null);\n                            return;\n                        }\n                        const file = new File([blob], 'first-frame.jpeg', { type: 'image/jpeg' });\n                        resolve(file);\n                    }, 'image/jpeg');\n                    video.removeEventListener('canplaythrough', onCanPlay);\n                }, 1000);\n            };\n\n            // Attach the canplay event listener\n            video.addEventListener('canplaythrough', onCanPlay);\n        });\n\n        // If the video is already loaded, trigger the event manually\n        if (video.readyState >= 2) {\n            video.dispatchEvent(new Event('loadeddata'));\n        }\n    });\n}\n","import React, { ReactElement } from 'react';\n\n// wrapper around children to allow drag and drop of files\nexport const DragDropFiles = ({\n    children,\n    onDrop,\n}: {\n    children: React.ReactNode;\n    onDrop: (file: File) => void;\n}): ReactElement => {\n    const onDropHandler = (e: any) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.dataTransfer) {\n            const file = e.dataTransfer.files[0];\n            onDrop(file);\n        }\n    };\n\n    const onDragOverHandler = (e: any) => e.preventDefault();\n\n    return (\n        <div onDrop={onDropHandler} onDragOver={onDragOverHandler}>\n            {children}\n        </div>\n    );\n};\n","import { ReactElement } from 'react';\nimport Dropdown from '../Dropdown/Dropdown';\nimport { SliderSection } from '../SliderSection/SliderSection';\nimport { Font, Fonts, SpecsState } from '../../App';\nimport heic2any from 'heic2any';\nimport React from 'react';\nimport { getFirstFrameOfVideoAsImageFile, processVideoFrames } from '../../video/process-video';\nimport { debounce, set, slice } from 'lodash';\nimport { getAsciiFromGreyscale, getGreyscale, resizeImage } from '../../ascii-utils';\nimport './menu.css';\nimport { DragDropFiles } from './DragDropFiles';\n\nexport const ASCIICHARS = [\n    '8M0|*|::`,.',\n    'M80*|:,.` ',\n    '$H2a?+.   ',\n    '8+::`..',\n    '+-:`  ',\n    '▓▒▒░░ ',\n    '░▒▓▔▕▖▗▘▙▚▛▜▝▞▟ ',\n    '░▒▓█▄▀│┤╣║╚╔╗╝┐╩└╦╠┴═┬├╬─┼┘┌¦┼└┴┬├┐',\n    '$@WgBMQNR8%0&đD#OGKEHdbmSqpAPwU54ZX96f23kVhaeFCj1IoJyst7}{YnulzriTx?][*Lcv×<>)(/+=÷“”!;:‘,’-.',\n    ['8 ', 'M ', '0 ', '# ', '$ ', '| ', '* ', '+ ', ': ', ': ', '` ', '. ', '. '],\n];\n\nconst asciiOptions = ASCIICHARS.map((char) => ({ value: char, label: char }));\n\ninterface MenuContainerProps {\n    onAsciiChange: (ascii: string | string[], resolution: number) => void;\n    specs: SpecsState;\n    onSpecsChange: (specs: SpecsState) => void;\n    onCopy: () => void;\n}\n\n// extend MenuContainerProps\ninterface MenuProps extends Omit<MenuContainerProps, 'onAsciiChange'> {\n    onImageUpload: (file: File) => void;\n    onVideoUpload: (video: File) => void;\n    onResolutionChange: (resolution: number) => void;\n    palette: string | string[];\n    onPaletteChange: (palette: string | string[]) => void;\n    isColorInverted: boolean;\n    onColorInvertedToggle: () => void;\n    contrast: number;\n    onContrastChange: (contrast: number) => void;\n    // textColor: string;\n    // onTextColorChange: (color: string) => void;`\n    // backgroundColor: string;\n    // onBackgroundColorChange: (color: string) => void;\n    isVideoEditMode: boolean;\n\n    onClickGenerateVideo: () => void;\n}\n\nconst Menu = ({\n    specs,\n    onSpecsChange,\n    onCopy,\n    onImageUpload,\n    onVideoUpload,\n    onResolutionChange,\n    palette,\n    onPaletteChange,\n    isColorInverted,\n    onColorInvertedToggle,\n    contrast,\n    onContrastChange,\n    isVideoEditMode,\n    onClickGenerateVideo,\n}: // textColor,\n// onTextColorChange,\n// backgroundColor,\n// onBackgroundColorChange,\nMenuProps): ReactElement => {\n    const imageUploadHandler = (imageFile: File) => {\n        if (imageFile.type === 'image/heic') {\n            // Convert HEIC image to JPEG format\n            try {\n                heic2any({\n                    blob: imageFile,\n                    toType: 'image/jpeg',\n                }).then((convertedBlob) => {\n                    const convertedFile = new File(\n                        [convertedBlob as Blob],\n                        imageFile.name.replace('.heic', '.jpg'),\n                        { type: 'image/jpeg' },\n                    );\n\n                    // Continue processing with the converted image\n                    onImageUpload(convertedFile);\n                });\n\n                // Create a new File instance with the converted blob\n            } catch (error) {\n                console.error('Error converting HEIC image:', error);\n            }\n        } else {\n            onImageUpload(imageFile);\n        }\n    };\n\n    return (\n        <DragDropFiles onDrop={imageUploadHandler}>\n            <div className=\"flex-row\">\n                <div className=\"menu\">\n                    <div className=\"menu-entry\">\n                        <label htmlFor=\"file-upload\" className=\"clickable-button\">\n                            Upload an image\n                        </label>\n                        <input\n                            id=\"file-upload\"\n                            type=\"file\"\n                            accept=\"image/*, .heic\"\n                            onChange={(event) => {\n                                const myFile = event.target.files?.[0];\n                                if (!myFile) {\n                                    return;\n                                }\n                                imageUploadHandler(myFile);\n                            }}\n                        />\n                    </div>\n                    <div className=\"menu-entry\">\n                        <label htmlFor=\"video-upload\" className=\"clickable-button\">\n                            Upload a video\n                        </label>\n                        <input\n                            id=\"video-upload\"\n                            type=\"file\"\n                            accept=\"video/*\"\n                            onChange={(event) => {\n                                const videoFile = event.target.files?.[0];\n                                if (!videoFile) {\n                                    return;\n                                }\n                                onVideoUpload(videoFile);\n                            }}\n                        />\n                    </div>\n                    <SliderSection\n                        specs={specs}\n                        onSpecsChange={onSpecsChange}\n                        onResolutionChange={onResolutionChange}\n                        contrast={contrast}\n                        onContrastChange={onContrastChange}\n                    />\n                    <Dropdown\n                        label=\"palette\"\n                        options={asciiOptions}\n                        selectedOption={palette}\n                        onOptionChange={onPaletteChange}\n                    />\n                    <Dropdown\n                        label=\"font\"\n                        options={Fonts.map((font: Font) => ({ value: font, label: font }))}\n                        selectedOption={specs.fontFamily}\n                        onOptionChange={(font) => {\n                            onSpecsChange({ ...specs, fontFamily: font as Font });\n                        }}\n                    />\n\n                    <form>\n                        <div className=\"menu-entry\">\n                            <div className=\"checkboxes\">\n                                <label>\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={isColorInverted}\n                                        onChange={onColorInvertedToggle}\n                                    />\n                                    {'inverse?'}\n                                </label>\n                            </div>\n                        </div>\n                    </form>\n\n                    <div className=\"menu-entry\">\n                        <label htmlFor=\"clipboard-button\" className=\"clickable-button\">\n                            Save to clipboard\n                        </label>\n\n                        <button id=\"clipboard-button\" className=\"hidden-button\" onClick={onCopy} />\n                    </div>\n                </div>\n                {isVideoEditMode && (\n                    <div className=\"info-box \">\n                        {\n                            \"here's the first frame of the video. configure to your liking, then press the button to generate your result \\n\"\n                        }\n                        <div>\n                            <label htmlFor=\"generate-video-button\" className={'clickable-button'}>\n                                Generate video\n                            </label>\n                            <button\n                                id=\"generate-video-button\"\n                                className=\"hidden-button\"\n                                onClick={onClickGenerateVideo}></button>\n                            <span className=\"highlighted-element\">!!</span>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </DragDropFiles>\n    );\n};\n\nexport const MenuContainer = (props: MenuContainerProps): ReactElement => {\n    const { specs, onAsciiChange, onSpecsChange } = props;\n\n    const [currentFile, setCurrentFile] = React.useState<File>();\n    const [isAsciiVideo, setIsAsciiVideo] = React.useState(false);\n    const [selectedPalette, setSelectedPalette] = React.useState<string | string[]>(ASCIICHARS[0]);\n    const [isColorInverted, setInvert] = React.useState(false);\n    const [contrast, setContrast] = React.useState(1);\n    const [videoForEditMode, setVideoForEditMode] = React.useState<File>();\n\n    const video = document.createElement('video');\n\n    // store greyscale so it can be a lookup table\n    const greyscale = React.useRef<number[][]>([]);\n\n    const setLoadingState = (isVideo: boolean) => {\n        if (isVideo) {\n            onAsciiChange('loading...', specs.resolution);\n        }\n    };\n\n    const updateAscii = ({\n        palette,\n        isColorInverted,\n        resolution,\n        file,\n        isVideo,\n        contrast,\n        resetLookups = false,\n    }: {\n        palette: string | string[];\n        isColorInverted: boolean;\n        resolution: number;\n        file: File | undefined;\n        isVideo: boolean;\n        contrast: number;\n        resetLookups?: boolean;\n    }) => {\n        if (!file) {\n            return;\n        }\n\n        if (isVideo) {\n            video.src = URL.createObjectURL(file);\n\n            processVideoFrames(\n                video,\n                palette,\n                resolution,\n                isColorInverted,\n                (frames) => onAsciiChange(frames, resolution),\n                contrast,\n            );\n        } else {\n            resizeImage({\n                file: file,\n                maxWidth: resolution,\n            }).then((canvas) => {\n                const context = canvas.getContext('2d', {\n                    willReadFrequently: true,\n                });\n                const data = context?.getImageData(0, 0, canvas.width, canvas.height);\n                if (!data) {\n                    return;\n                }\n\n                // avoid recalculating greyscale for each frame\n                if (resetLookups) {\n                    greyscale.current = getGreyscale(data);\n                }\n\n                const newAscii = getAsciiFromGreyscale(\n                    greyscale.current,\n                    palette,\n                    isColorInverted,\n                    contrast,\n                );\n\n                onAsciiChange(newAscii, resolution);\n                // TODO: this causes unnecessary state updates, but it makes the resolution change\n                // look smoothest. Maybe there's a better way to do this?\n                onSpecsChange({\n                    ...specs,\n                    resolution: resolution,\n                });\n            });\n        }\n    };\n\n    const debouncedOnResolutionChange = debounce((resolution: number) => {\n        setLoadingState(isAsciiVideo);\n        updateAscii({\n            palette: selectedPalette,\n            isColorInverted,\n            resolution,\n            file: currentFile,\n            isVideo: isAsciiVideo,\n            contrast,\n            resetLookups: true,\n        });\n    }, 5);\n\n    const debouncedOnContrastChange = debounce((contrast: number) => {\n        setLoadingState(isAsciiVideo);\n        setContrast(contrast);\n        updateAscii({\n            palette: selectedPalette,\n            isColorInverted,\n            resolution: specs.resolution,\n            file: currentFile,\n            isVideo: isAsciiVideo,\n            contrast,\n        });\n    }, 5);\n\n    const handleVideoUpload = (videoFile: File) => {\n        {\n            video.src = URL.createObjectURL(videoFile);\n            setVideoForEditMode(videoFile);\n            setIsAsciiVideo(false);\n\n            getFirstFrameOfVideoAsImageFile(video).then((imageFile) => {\n                if (!imageFile) {\n                    return;\n                }\n                updateAscii({\n                    palette: selectedPalette,\n                    isColorInverted,\n                    resolution: specs.resolution,\n                    file: imageFile,\n                    isVideo: false,\n                    contrast,\n                    resetLookups: true,\n                });\n                setCurrentFile(imageFile);\n            });\n        }\n    };\n    return (\n        <Menu\n            {...props}\n            onResolutionChange={debouncedOnResolutionChange}\n            onImageUpload={(imageFile) => {\n                setIsAsciiVideo(false);\n                updateAscii({\n                    palette: selectedPalette,\n                    isColorInverted,\n                    resolution: specs.resolution,\n                    file: imageFile,\n                    isVideo: false,\n                    contrast,\n                    resetLookups: true,\n                });\n                setCurrentFile(imageFile);\n            }}\n            onVideoUpload={handleVideoUpload}\n            palette={selectedPalette}\n            onPaletteChange={(newPalette) => {\n                setSelectedPalette(newPalette);\n                setLoadingState(isAsciiVideo);\n                updateAscii({\n                    palette: newPalette,\n                    isColorInverted,\n                    resolution: specs.resolution,\n                    file: currentFile,\n                    isVideo: isAsciiVideo,\n                    contrast,\n                });\n            }}\n            isColorInverted={isColorInverted}\n            onColorInvertedToggle={() => {\n                setInvert(!isColorInverted);\n                setLoadingState(isAsciiVideo);\n                updateAscii({\n                    palette: selectedPalette,\n                    isColorInverted: !isColorInverted,\n                    resolution: specs.resolution,\n                    file: currentFile,\n                    isVideo: isAsciiVideo,\n                    contrast,\n                });\n            }}\n            contrast={contrast}\n            onContrastChange={debouncedOnContrastChange}\n            isVideoEditMode={Boolean(videoForEditMode)}\n            onClickGenerateVideo={() => {\n                if (videoForEditMode) {\n                    setIsAsciiVideo(true);\n                    setLoadingState(true);\n\n                    updateAscii({\n                        palette: selectedPalette,\n                        isColorInverted,\n                        resolution: specs.resolution,\n                        file: videoForEditMode,\n                        isVideo: true,\n                        contrast,\n                        resetLookups: true,\n                    });\n                    setCurrentFile(videoForEditMode);\n                    setVideoForEditMode(undefined);\n                }\n            }}\n        />\n    );\n};\n","import React from 'react';\n\nexport const AsciiVideo = ({\n    asciiFrames,\n    frameRate = 10,\n}: {\n    asciiFrames: string[];\n    // the frame rate to play the video at (has nothing to do with video creation)\n    frameRate?: number;\n}): JSX.Element | null => {\n    if (asciiFrames.length == 0) {\n        return null;\n    }\n    const [currentFrameIndex, setCurrentFrameIndex] = React.useState(0);\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setCurrentFrameIndex((prevIndex) => (prevIndex + 1) % asciiFrames.length);\n        }, 1000 / frameRate);\n\n        return () => clearInterval(interval);\n    }, [asciiFrames.length, frameRate]);\n\n    return <div>{asciiFrames[currentFrameIndex]}</div>;\n};\n","import './index.css';\nimport React from 'react';\nimport { MenuContainer as Menu } from './ui/Menu/Menu';\nimport { AsciiVideo } from './video/asciiVideo';\n\n//rewrite as enum?\n\nexport const Fonts = [\n    'Ibm Plex Mono',\n    'Azeret Mono',\n    'Space Mono',\n    'Roboto Mono',\n    'Courier New',\n    'Monaco',\n    'Arial',\n    'Helvetica',\n];\n\nexport type Font = (typeof Fonts)[number];\n\nexport interface SpecsState {\n    fontSize: number;\n    resolution: number;\n    width: number;\n    zoom: number;\n    weight: number;\n    fontFamily: Font;\n    kerning: number;\n    lineHeight: number;\n}\n\nconst App: React.FC = () => {\n    const [ascii, setAscii] = React.useState<string | string[]>('');\n    const [specs, setSpecs] = React.useState<SpecsState>({\n        fontSize: 30,\n        resolution: 100,\n        width: 700,\n        zoom: 1,\n        weight: 400,\n        fontFamily: 'Ibm Plex Mono',\n        kerning: 0,\n        lineHeight: 1,\n    });\n    console.log('specs', specs);\n\n    const lineHeight = 1000 / specs.resolution;\n    console.log('ascii', ascii.slice(0, 100));\n\n    return (\n        <div className=\"flex-container\">\n            <Menu\n                specs={specs}\n                onSpecsChange={(specs: SpecsState) => setSpecs(specs)}\n                onAsciiChange={(ascii: string | string[]) => setAscii(ascii)}\n                onCopy={() => {\n                    navigator.clipboard.writeText(\n                        typeof ascii === 'string' ? ascii : JSON.stringify(ascii),\n                    );\n                }}\n            />\n            <pre>\n                <div\n                    className=\"ascii\"\n                    style={{\n                        fontSize: `${lineHeight * 1 * specs.zoom}px`,\n                        lineHeight: `${lineHeight * specs.zoom}px`,\n                        fontWeight: specs.weight,\n                        fontFamily: specs.fontFamily,\n                        letterSpacing: `${specs.kerning}px`,\n                    }}>\n                    {ascii !== '' ? (\n                        typeof ascii === 'string' ? (\n                            ascii\n                        ) : (\n                            <AsciiVideo asciiFrames={ascii} />\n                        )\n                    ) : (\n                        '((-.-)/^'\n                    )}\n                </div>\n            </pre>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}