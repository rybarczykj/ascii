{"version":3,"sources":["ui/Dropdown/Dropdown.tsx","ui/Slider/Slider.tsx","ui/SliderSection/SliderSection.tsx","ascii-utils.tsx","video/process-video.ts","ui/Menu/DragDropFiles.tsx","ui/Menu/Menu.tsx","video/asciiVideo.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["Dropdown","label","options","selectedOption","onOptionChange","className","onChange","option","value","styles","control","baseStyles","state","minHeight","alignItems","width","menuIsOpen","borderRadius","padding","dropdownIndicator","input","components","IndicatorSeparator","menuPosition","find","Slider","title","min","max","step","disabled","Error","normalizedValue","Math","floor","leftDashes","repeat","rightDashes","type","e","parseFloat","target","SliderSection","specs","onSpecsChange","onResolutionChange","contrast","onContrastChange","brightness","onBrightnessChange","resolution","toString","slice","newContrast","newBrightness","newZoom","zoom","newWeight","weight","newKerning","kerning","getAsciiFromContext","context","asciiChars","inverse","imageData","getImageData","canvas","height","greyscale","getGreyscale","ascii","getAsciiFromGreyscale","data","pixels","y","greyscaleRow","x","pixelIndex","luminance","push","length","adjustedLuminance","contrastedLuminance","asciiIndex","processVideoFrames","video","palette","asciiResolution","isColorInverted","onVideoFramesChange","Promise","resolve","onloadedmetadata","document","createElement","getContext","willReadFrequently","frames","aspectRatio","videoWidth","videoHeight","processFrame","drawImage","frameAscii","paused","ended","currentTime","duration","setTimeout","play","addEventListener","onCanPlay","toBlob","blob","file","File","removeEventListener","readyState","dispatchEvent","Event","DragDropFiles","children","onDrop","preventDefault","stopPropagation","dataTransfer","files","onDragOver","ASCIICHARS","asciiOptions","map","char","Menu","onCopy","onImageUpload","onVideoUpload","onPaletteChange","onColorInvertedToggle","isVideoEditMode","onClickGenerateVideo","imageUploadHandler","imageFile","heic2any","toType","then","convertedBlob","convertedFile","name","replace","error","console","htmlFor","id","accept","event","myFile","videoFile","Fonts","font","fontFamily","checked","onClick","MenuContainer","props","onAsciiChange","React","useState","currentFile","setCurrentFile","isAsciiVideo","setIsAsciiVideo","selectedPalette","setSelectedPalette","setInvert","setContrast","setBrightness","videoForEditMode","setVideoForEditMode","useRef","setLoadingState","isVideo","updateAscii","resetLookups","src","URL","createObjectURL","settings","maxWidth","reader","FileReader","image","Image","ok","no","match","onload","readerEvent","maxHeight","resize","result","readAsDataURL","resizeImage","current","newAscii","debouncedOnResolutionChange","debounce","debouncedOnContrastChange","debouncedOnBrightnessChange","getFirstFrameOfVideoAsImageFile","newPalette","Boolean","undefined","AsciiVideo","asciiFrames","frameRate","currentFrameIndex","setCurrentFrameIndex","useEffect","interval","setInterval","prevIndex","clearInterval","App","setAscii","fontSize","lineHeight","setSpecs","log","navigator","clipboard","writeText","JSON","stringify","style","fontWeight","letterSpacing","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.91a8b257.chunk.js","sourcesContent":["import React from 'react';\nimport CreatableSelect from 'react-select/creatable';\n\ninterface DropdownProps<T> {\n    label: string;\n    options: {\n        value: T;\n        label: T;\n    }[];\n    selectedOption: T;\n    onOptionChange: (option: T) => void;\n}\n\nconst Dropdown = <T,>({\n    label,\n    options,\n    selectedOption,\n    onOptionChange,\n}: DropdownProps<T>): JSX.Element => {\n    return (\n        <div className=\"menu-entry\">\n            <div className=\"menu-entry-label\">{label}:</div>\n            <CreatableSelect\n                options={options}\n                className=\"dropdown\"\n                onChange={(option) => onOptionChange(option?.value || options[0].value)}\n                styles={{\n                    control: (baseStyles, state) => ({\n                        ...baseStyles,\n                        minHeight: '5px !important',\n                        alignItems: 'baseline',\n                        width: state.menuIsOpen ? '200px' : '100px',\n                        borderRadius: '2px',\n                        padding: '0px',\n                    }),\n                    dropdownIndicator: (baseStyles, state) => ({\n                        ...baseStyles,\n                        padding: '0px',\n                    }),\n                    input: (baseStyles, state) => ({\n                        ...baseStyles,\n                        padding: '0px',\n                    }),\n                }}\n                components={{ IndicatorSeparator: () => null }}\n                menuPosition=\"fixed\"\n                value={options.find((option) => option.value === selectedOption)}\n            />\n        </div>\n    );\n};\n\nexport default Dropdown;\n","import React from 'react';\n\ninterface SliderProps {\n    title: string;\n    onChange: (newValue: number) => void;\n    label: string;\n    // eslint-disable-next-line\n    value: any;\n    min: number;\n    max: number;\n    step?: number;\n    disabled?: boolean;\n}\n\nexport const Slider: React.FC<SliderProps> = ({\n    title,\n    onChange,\n    label,\n    value,\n    min,\n    max,\n    step,\n    disabled,\n}) => {\n    const sliderLength = 10;\n    if (value > max || value < min) {\n        throw new Error(`value ${value} is outside of range ${min} to ${max}`);\n    }\n\n    const normalizedValue = Math.floor(((value - min) / (max - min)) * sliderLength);\n\n    const leftDashes = '-'.repeat(normalizedValue);\n    const rightDashes = '-'.repeat(sliderLength - normalizedValue);\n\n    return (\n        <div className=\"slidecontainer\">\n            <p>{title}</p>\n            <div className=\"slider-track\">\n                <input\n                    type=\"range\"\n                    min={min}\n                    max={max}\n                    step={step}\n                    value={value}\n                    onChange={(e) => onChange(parseFloat(e.target.value))}\n                    disabled={disabled}\n                    className=\"slider-input\"\n                />\n                {`<`}\n                <span className=\"slider-dashes\">{leftDashes}</span>\n                <span className=\"slider-asterix\">*</span>\n                <span className=\"slider-dashes\">{rightDashes}</span>\n                {`>`}\n                {/* <output>{value}</output> */}\n            </div>\n        </div>\n    );\n};\n","import { Slider } from '../Slider/Slider';\nimport React from 'react';\nimport { SpecsState } from '../../App';\n\nexport const SliderSection: React.FC<{\n    specs: SpecsState;\n    onSpecsChange: (specs: SpecsState) => void;\n    onResolutionChange: (resolution: number) => void;\n    contrast: number;\n    onContrastChange: (contrast: number) => void;\n    brightness: number; // Added brightness prop\n    onBrightnessChange: (brightness: number) => void; // Added onBrightnessChange prop\n}> = ({\n    specs,\n    onSpecsChange,\n    onResolutionChange,\n    contrast,\n    onContrastChange,\n    brightness,\n    onBrightnessChange,\n}) => {\n    // TODO: consider using an exponential scale for resolution\n    return (\n        <>\n            <Slider\n                title={'resolution:'}\n                onChange={(resolution) => {\n                    onResolutionChange(resolution);\n                }}\n                value={specs.resolution}\n                min={5}\n                max={500}\n                label={specs.resolution.toString().slice(0, 5)}\n            />\n\n            <Slider\n                title={'contrast:'}\n                onChange={(newContrast) => {\n                    onContrastChange(newContrast);\n                }}\n                value={contrast}\n                min={0.1}\n                max={50}\n                step={0.1}\n                label={contrast.toString()}\n            />\n\n            <Slider\n                title={'brightness:'}\n                onChange={(newBrightness) => {\n                    onBrightnessChange(newBrightness);\n                }}\n                value={brightness}\n                min={-255}\n                max={255}\n                step={1}\n                label={brightness.toString()}\n            />\n\n            <Slider\n                title={'zoom:'}\n                onChange={(newZoom) => {\n                    onSpecsChange({ ...specs, zoom: newZoom });\n                }}\n                value={specs.zoom}\n                min={1}\n                max={10}\n                step={0.25}\n                label={specs.zoom.toString().slice(0, 4)}\n            />\n            <Slider\n                title={'font weight:'}\n                onChange={(newWeight) => {\n                    onSpecsChange({ ...specs, weight: newWeight });\n                }}\n                value={specs.weight}\n                min={0}\n                max={800}\n                label={specs.weight.toString()}\n            />\n\n            <Slider\n                title={'kerning:'}\n                onChange={(newKerning) => {\n                    onSpecsChange({ ...specs, kerning: newKerning });\n                }}\n                value={specs.kerning}\n                min={-10}\n                max={10}\n                label={specs.kerning.toString()}\n            />\n            {/* <Slider\n                title={'line height:'}\n                onChange={(newLineHeight) => {\n                    onSpecsChange({ ...specs, lineHeight: newLineHeight });\n                }}\n                value={specs.lineHeight}\n                min={0.1}\n                max={200}\n                step={0.1}\n                label={specs.lineHeight.toString()}\n            /> */}\n        </>\n    );\n};\n","// const asciiChars = '+::`..';\n// const asciiChars =\n//     '$@WgBMQNR8%0&đD#OGKEHdbmSqpAPwU54ZX96f23kVhaeFCj1IoJyst7}{YnulzriTx?][*Lcv×<>)(/+=÷“”!;:‘,’-.';\n\n// const asciiChars = '▓▒▒░░';\n// const asciiChars = ['8 ', 'M ', '0 ', '# ', '$ ', '| ', '* ', '+ ', ': ', ': ', '` ', '. ', '. '];\n\n// const asciiChars = '$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~<>i!lI;:,\"^`\\'.';\n// const asciiChars = '+-:`  ';\n['8 ', 'M ', '0 ', '# ', '$ ', '| ', '* ', '+ ', ': ', ': ', '` ', '. ', '. '];\n\n// export const ASCIICHARS = [\n//     '8M0|*|::`,.',\n//     '+::`..',\n//     '+-:`  ',\n//     '▓▒▒░░',\n//     '$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~<>i!lI;:,\"^`\\'.',\n//     '$@WgBMQNR8%0&đD#OGKEHdbmSqpAPwU54ZX96f23kVhaeFCj1IoJyst7}{YnulzriTx?][*Lcv×<>)(/+=÷“”!;:‘,’-.',\n// ];\n\n// const asciiChars = '8M0#$|*|::`,.';\n// const asciiChars = '#8?0+:.,';\n// const asciiChars = '8#|:.';\n\nexport const getAsciiFromContext = (\n    context: CanvasRenderingContext2D,\n    asciiChars: string | string[],\n    inverse = false,\n    contrast: number,\n    brightness: number,\n): string => {\n    const imageData = context.getImageData(0, 0, context.canvas.width, context.canvas.height);\n    const greyscale = getGreyscale(imageData);\n    const ascii = getAsciiFromGreyscale(greyscale, asciiChars, inverse, contrast, brightness);\n    return ascii;\n};\n\nexport const getGreyscale = (data: ImageData): number[][] => {\n    const pixels = data.data;\n\n    const greyscale = [];\n    for (let y = 0; y < data.height; y++) {\n        const greyscaleRow = [];\n        for (let x = 0; x < data.width; x++) {\n            const pixelIndex = (y * data.width + x) * 4;\n            // perceived luminance acccording to https://en.wikipedia.org/wiki/Relative_luminance\n            const luminance =\n                0.2126 * pixels[pixelIndex] +\n                0.7152 * pixels[pixelIndex + 1] +\n                0.0722 * pixels[pixelIndex + 2];\n\n            greyscaleRow.push(luminance);\n        }\n        greyscale.push(greyscaleRow);\n    }\n    return greyscale;\n};\n\nexport const getAsciiFromGreyscale = (\n    greyscale: number[][],\n    asciiChars: string | string[],\n    inverse = false,\n    contrast: number,\n    brightness: number,\n): string => {\n    let ascii = '';\n    // iterate over each row, and each pixel in the row\n    for (let y = 0; y < greyscale.length; y++) {\n        for (let x = 0; x < greyscale[y].length; x++) {\n            const luminance = greyscale[y][x];\n\n            const adjustedLuminance = brightness\n                ? Math.max(Math.min(luminance + brightness, 255), 0)\n                : luminance;\n\n            const contrastedLuminance = contrast\n                ? Math.max(Math.min((adjustedLuminance - 127.5) * contrast, 255), 0)\n                : adjustedLuminance;\n\n            const asciiIndex = Math.floor((contrastedLuminance / 255) * (asciiChars.length - 1));\n            if (inverse) {\n                ascii += asciiChars[asciiChars.length - asciiIndex - 1];\n            } else {\n                ascii += asciiChars[asciiIndex];\n            }\n        }\n        ascii += '\\n';\n    }\n    return ascii;\n};\n\nconst resize = (image: HTMLImageElement, maxHeight: number, canvas: HTMLCanvasElement) => {\n    let width = image.width;\n    let height = image.height;\n\n    if (height > maxHeight) {\n        width *= maxHeight / height;\n        height = maxHeight;\n    }\n    // 0.6 because the ascii characters are taller than they are wide\n    height *= 0.6;\n\n    canvas.width = width;\n    canvas.height = height;\n    const context = canvas.getContext('2d');\n    context?.drawImage(image, 0, 0, width, height);\n    return canvas;\n};\n\ninterface IResizeImageOptions {\n    maxWidth: number;\n    file: File;\n}\n\n// Returns a Canvas with the image resized to be under MaxHeight\nexport const resizeImage = (settings: IResizeImageOptions): Promise<HTMLCanvasElement> => {\n    const file = settings.file;\n    const maxWidth = settings.maxWidth;\n    const reader = new FileReader();\n    const image = new Image();\n    const canvas = document.createElement('canvas');\n\n    return new Promise<HTMLCanvasElement>((ok, no) => {\n        if (!file.type.match(/image.*/)) {\n            no(new Error('Not an image'));\n            return;\n        }\n\n        reader.onload = (readerEvent: any) => {\n            image.onload = () => ok(resize(image, maxWidth, canvas));\n            image.src = readerEvent.target.result;\n        };\n        reader.readAsDataURL(file);\n    });\n};\n","import { getAsciiFromContext } from '../ascii-utils';\n\nexport const processVideoFrames = async (\n    video: HTMLVideoElement,\n    palette: string | string[],\n    asciiResolution: number,\n    isColorInverted: boolean,\n    onVideoFramesChange: (frame: string[]) => void,\n    contrast: number,\n    brightness: number,\n) => {\n    // Wait for video metadata to load\n    await new Promise<void>((resolve) => {\n        video.onloadedmetadata = () => {\n            resolve();\n        };\n    });\n\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d', {\n        willReadFrequently: true,\n    });\n    if (!context || !video) return;\n\n    const frames: string[] = [];\n\n    const frameRate = 10; // Number of frames per second (adjust this based on performance)\n\n    // Calculate the width and height for processing based on the original video's aspect ratio\n    const aspectRatio = video.videoWidth / video.videoHeight;\n\n    const width = asciiResolution;\n    // 0.6 because the ascii characters are taller than they are wide\n    const height = (0.6 * width) / aspectRatio;\n\n    // Set the canvas dimensions to match the processing size\n    context.canvas.width = width;\n    context.canvas.height = height;\n\n    const processFrame = async () => {\n        context.drawImage(video, 0, 0, width, height);\n        const frameAscii = getAsciiFromContext(\n            context,\n            palette,\n            isColorInverted,\n            contrast,\n            brightness,\n        );\n        frames.push(frameAscii);\n\n        if (!video.paused && !video.ended && !(video.currentTime >= video.duration)) {\n            setTimeout(processFrame, 1000 / frameRate);\n            video.currentTime += 1 / frameRate;\n        } else {\n            // Video processing is done\n            onVideoFramesChange(frames);\n        }\n    };\n\n    // Start video playback and frame processing\n    video.currentTime = 0;\n    await video.play();\n    processFrame();\n};\n\nexport async function getFirstFrameOfVideoAsImageFile(\n    video: HTMLVideoElement,\n): Promise<File | null> {\n    return new Promise((resolve) => {\n        // Create a canvas element\n        const canvas = document.createElement('canvas');\n        const context = canvas.getContext('2d');\n\n        if (!context) {\n            // Unable to get 2D context, return null\n            resolve(null);\n            return;\n        }\n\n        video.addEventListener('loadeddata', () => {\n            canvas.width = video.videoWidth;\n            canvas.height = video.videoHeight;\n\n            // TODO: this is called like 60 times, which might not be ideal.\n            // but it's the only what i can get the video to actuall show\n            // on the canvas\n            const onCanPlay = () => {\n                video.play();\n                video.currentTime = 0.001;\n                context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n                // wait 2 seconds for good measure\n                setTimeout(() => {\n                    canvas.toBlob(async (blob) => {\n                        if (!blob) {\n                            resolve(null);\n                            return;\n                        }\n                        const file = new File([blob], 'first-frame.jpeg', { type: 'image/jpeg' });\n                        resolve(file);\n                    }, 'image/jpeg');\n                    video.removeEventListener('canplaythrough', onCanPlay);\n                }, 1000);\n            };\n\n            // Attach the canplay event listener\n            video.addEventListener('canplaythrough', onCanPlay);\n        });\n\n        // If the video is already loaded, trigger the event manually\n        if (video.readyState >= 2) {\n            video.dispatchEvent(new Event('loadeddata'));\n        }\n    });\n}\n","import React, { ReactElement } from 'react';\n\n// wrapper around children to allow drag and drop of files\nexport const DragDropFiles = ({\n    children,\n    onDrop,\n}: {\n    children: React.ReactNode;\n    onDrop: (file: File) => void;\n}): ReactElement => {\n    const onDropHandler = (e: any) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (e.dataTransfer) {\n            const file = e.dataTransfer.files[0];\n            onDrop(file);\n        }\n    };\n\n    const onDragOverHandler = (e: any) => e.preventDefault();\n\n    return (\n        <div onDrop={onDropHandler} onDragOver={onDragOverHandler}>\n            {children}\n        </div>\n    );\n};\n","import { ReactElement } from 'react';\nimport Dropdown from '../Dropdown/Dropdown';\nimport { SliderSection } from '../SliderSection/SliderSection';\nimport { Font, Fonts, SpecsState } from '../../App';\nimport heic2any from 'heic2any';\nimport React from 'react';\nimport { getFirstFrameOfVideoAsImageFile, processVideoFrames } from '../../video/process-video';\nimport { debounce, set, slice } from 'lodash';\nimport { getAsciiFromGreyscale, getGreyscale, resizeImage } from '../../ascii-utils';\nimport './menu.css';\nimport { DragDropFiles } from './DragDropFiles';\n\nexport const ASCIICHARS = [\n    '8M0|*|::`,.',\n    'M80*|:,.` ',\n    '$H2a?+.   ',\n    '8+::`..',\n    '+-:`  ',\n    '▓▒▒░░ ',\n    '░▒▓▔▕▖▗▘▙▚▛▜▝▞▟ ',\n    '░▒▓█▄▀│┤╣║╚╔╗╝┐╩└╦╠┴═┬├╬─┼┘┌¦┼└┴┬├┐',\n    '$@WgBMQNR8%0&đD#OGKEHdbmSqpAPwU54ZX96f23kVhaeFCj1IoJyst7}{YnulzriTx?][*Lcv×<>)(/+=÷“”!;:‘,’-.',\n    ['8 ', 'M ', '0 ', '# ', '$ ', '| ', '* ', '+ ', ': ', ': ', '` ', '. ', '. '],\n];\n\nconst asciiOptions = ASCIICHARS.map((char) => ({ value: char, label: char }));\n\ninterface MenuContainerProps {\n    onAsciiChange: (ascii: string | string[], resolution: number) => void;\n    specs: SpecsState;\n    onSpecsChange: (specs: SpecsState) => void;\n    onCopy: () => void;\n}\n\n// extend MenuContainerProps\ninterface MenuProps extends Omit<MenuContainerProps, 'onAsciiChange'> {\n    onImageUpload: (file: File) => void;\n    onVideoUpload: (video: File) => void;\n    onResolutionChange: (resolution: number) => void;\n    palette: string | string[];\n    onPaletteChange: (palette: string | string[]) => void;\n    isColorInverted: boolean;\n    onColorInvertedToggle: () => void;\n    contrast: number;\n    onContrastChange: (contrast: number) => void;\n    brightness: number;\n    onBrightnessChange: (brightness: number) => void;\n    // textColor: string;\n    // onTextColorChange: (color: string) => void;`\n    // backgroundColor: string;\n    // onBackgroundColorChange: (color: string) => void;\n    isVideoEditMode: boolean;\n\n    onClickGenerateVideo: () => void;\n}\n\nconst Menu = ({\n    specs,\n    onSpecsChange,\n    onCopy,\n    onImageUpload,\n    onVideoUpload,\n    onResolutionChange,\n    palette,\n    onPaletteChange,\n    isColorInverted,\n    onColorInvertedToggle,\n    contrast,\n    onContrastChange,\n    isVideoEditMode,\n    onClickGenerateVideo,\n    brightness,\n    onBrightnessChange,\n}: // textColor,\n// onTextColorChange,\n// backgroundColor,\n// onBackgroundColorChange,\nMenuProps): ReactElement => {\n    const imageUploadHandler = (imageFile: File) => {\n        if (imageFile.type === 'image/heic') {\n            // Convert HEIC image to JPEG format\n            try {\n                heic2any({\n                    blob: imageFile,\n                    toType: 'image/jpeg',\n                }).then((convertedBlob) => {\n                    const convertedFile = new File(\n                        [convertedBlob as Blob],\n                        imageFile.name.replace('.heic', '.jpg'),\n                        { type: 'image/jpeg' },\n                    );\n\n                    // Continue processing with the converted image\n                    onImageUpload(convertedFile);\n                });\n\n                // Create a new File instance with the converted blob\n            } catch (error) {\n                console.error('Error converting HEIC image:', error);\n            }\n        } else {\n            onImageUpload(imageFile);\n        }\n    };\n\n    return (\n        <DragDropFiles onDrop={imageUploadHandler}>\n            <div className=\"flex-row\">\n                <div className=\"menu\">\n                    <div className=\"menu-entry\">\n                        <label htmlFor=\"file-upload\" className=\"clickable-button\">\n                            Upload an image\n                        </label>\n                        <input\n                            id=\"file-upload\"\n                            type=\"file\"\n                            accept=\"image/*, .heic\"\n                            onChange={(event) => {\n                                const myFile = event.target.files?.[0];\n                                if (!myFile) {\n                                    return;\n                                }\n                                imageUploadHandler(myFile);\n                            }}\n                        />\n                    </div>\n                    <div className=\"menu-entry\">\n                        <label htmlFor=\"video-upload\" className=\"clickable-button\">\n                            Upload a video\n                        </label>\n                        <input\n                            id=\"video-upload\"\n                            type=\"file\"\n                            accept=\"video/*\"\n                            onChange={(event) => {\n                                const videoFile = event.target.files?.[0];\n                                if (!videoFile) {\n                                    return;\n                                }\n                                onVideoUpload(videoFile);\n                            }}\n                        />\n                    </div>\n                    <SliderSection\n                        specs={specs}\n                        onSpecsChange={onSpecsChange}\n                        onResolutionChange={onResolutionChange}\n                        contrast={contrast}\n                        onContrastChange={onContrastChange}\n                        brightness={brightness}\n                        onBrightnessChange={onBrightnessChange}\n                    />\n                    <Dropdown\n                        label=\"palette\"\n                        options={asciiOptions}\n                        selectedOption={palette}\n                        onOptionChange={onPaletteChange}\n                    />\n                    <Dropdown\n                        label=\"font\"\n                        options={Fonts.map((font: Font) => ({ value: font, label: font }))}\n                        selectedOption={specs.fontFamily}\n                        onOptionChange={(font) => {\n                            onSpecsChange({ ...specs, fontFamily: font as Font });\n                        }}\n                    />\n\n                    <form>\n                        <div className=\"menu-entry\">\n                            <div className=\"checkboxes\">\n                                <label>\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={isColorInverted}\n                                        onChange={onColorInvertedToggle}\n                                    />\n                                    {'inverse?'}\n                                </label>\n                            </div>\n                        </div>\n                    </form>\n\n                    <div className=\"menu-entry\">\n                        <label htmlFor=\"clipboard-button\" className=\"clickable-button\">\n                            Save to clipboard\n                        </label>\n\n                        <button id=\"clipboard-button\" className=\"hidden-button\" onClick={onCopy} />\n                    </div>\n                </div>\n                {isVideoEditMode && (\n                    <div className=\"info-box \">\n                        {\n                            \"here's the first frame of the video. configure to your liking, then press the button to generate your result \\n\"\n                        }\n                        <div>\n                            <label htmlFor=\"generate-video-button\" className={'clickable-button'}>\n                                Generate video\n                            </label>\n                            <button\n                                id=\"generate-video-button\"\n                                className=\"hidden-button\"\n                                onClick={onClickGenerateVideo}></button>\n                            <span className=\"highlighted-element\">!!</span>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </DragDropFiles>\n    );\n};\n\nexport const MenuContainer = (props: MenuContainerProps): ReactElement => {\n    const { specs, onAsciiChange, onSpecsChange } = props;\n\n    const [currentFile, setCurrentFile] = React.useState<File>();\n    const [isAsciiVideo, setIsAsciiVideo] = React.useState(false);\n    const [selectedPalette, setSelectedPalette] = React.useState<string | string[]>(ASCIICHARS[0]);\n    const [isColorInverted, setInvert] = React.useState(false);\n    const [contrast, setContrast] = React.useState(1);\n    const [brightness, setBrightness] = React.useState(0);\n    const [videoForEditMode, setVideoForEditMode] = React.useState<File>();\n\n    const video = document.createElement('video');\n\n    // store greyscale so it can be a lookup table\n    const greyscale = React.useRef<number[][]>([]);\n\n    const setLoadingState = (isVideo: boolean) => {\n        if (isVideo) {\n            onAsciiChange('loading...', specs.resolution);\n        }\n    };\n\n    const updateAscii = ({\n        palette,\n        isColorInverted,\n        resolution,\n        file,\n        isVideo,\n        contrast,\n        brightness,\n        resetLookups,\n    }: {\n        palette: string | string[];\n        isColorInverted: boolean;\n        resolution: number;\n        file: File | undefined;\n        isVideo: boolean;\n        contrast: number;\n        brightness: number;\n        resetLookups: boolean;\n    }) => {\n        if (!file) {\n            return;\n        }\n\n        if (isVideo) {\n            video.src = URL.createObjectURL(file);\n\n            processVideoFrames(\n                video,\n                palette,\n                resolution,\n                isColorInverted,\n                (frames) => onAsciiChange(frames, resolution),\n                contrast,\n                brightness,\n            );\n        } else {\n            resizeImage({\n                file: file,\n                maxWidth: resolution,\n            }).then((canvas) => {\n                const context = canvas.getContext('2d', {\n                    willReadFrequently: true,\n                });\n                const data = context?.getImageData(0, 0, canvas.width, canvas.height);\n                if (!data) {\n                    return;\n                }\n\n                // avoid recalculating greyscale for each frame\n                if (resetLookups) {\n                    greyscale.current = getGreyscale(data);\n                }\n\n                const newAscii = getAsciiFromGreyscale(\n                    greyscale.current,\n                    palette,\n                    isColorInverted,\n                    contrast,\n                    brightness,\n                );\n\n                onAsciiChange(newAscii, resolution);\n                // TODO: this causes unnecessary state updates, but it makes the resolution change\n                // look smoothest. Maybe there's a better way to do this?\n                onSpecsChange({\n                    ...specs,\n                    resolution: resolution,\n                });\n            });\n        }\n    };\n\n    const debouncedOnResolutionChange = debounce((resolution: number) => {\n        setLoadingState(isAsciiVideo);\n        updateAscii({\n            palette: selectedPalette,\n            isColorInverted,\n            resolution,\n            file: currentFile,\n            isVideo: isAsciiVideo,\n            contrast,\n            brightness,\n            resetLookups: true,\n        });\n    }, 5);\n\n    const debouncedOnContrastChange = debounce((contrast: number) => {\n        setLoadingState(isAsciiVideo);\n        setContrast(contrast);\n        updateAscii({\n            palette: selectedPalette,\n            isColorInverted,\n            resolution: specs.resolution,\n            file: currentFile,\n            isVideo: isAsciiVideo,\n            contrast,\n            brightness,\n            resetLookups: false,\n        });\n    }, 5);\n\n    const debouncedOnBrightnessChange = debounce((brightness: number) => {\n        setLoadingState(isAsciiVideo);\n        setBrightness(brightness);\n        updateAscii({\n            palette: selectedPalette,\n            isColorInverted,\n            resolution: specs.resolution,\n            file: currentFile,\n            isVideo: isAsciiVideo,\n            contrast,\n            brightness,\n            resetLookups: false,\n        });\n    }, 5);\n\n    const handleVideoUpload = (videoFile: File) => {\n        {\n            video.src = URL.createObjectURL(videoFile);\n            setVideoForEditMode(videoFile);\n            setIsAsciiVideo(false);\n\n            getFirstFrameOfVideoAsImageFile(video).then((imageFile) => {\n                if (!imageFile) {\n                    return;\n                }\n                updateAscii({\n                    palette: selectedPalette,\n                    isColorInverted,\n                    resolution: specs.resolution,\n                    file: imageFile,\n                    isVideo: false,\n                    contrast,\n                    brightness,\n                    resetLookups: true,\n                });\n                setCurrentFile(imageFile);\n            });\n        }\n    };\n    return (\n        <Menu\n            {...props}\n            onResolutionChange={debouncedOnResolutionChange}\n            onImageUpload={(imageFile) => {\n                setIsAsciiVideo(false);\n                updateAscii({\n                    palette: selectedPalette,\n                    isColorInverted,\n                    resolution: specs.resolution,\n                    file: imageFile,\n                    isVideo: false,\n                    contrast,\n                    brightness,\n                    resetLookups: true,\n                });\n                setCurrentFile(imageFile);\n            }}\n            onVideoUpload={handleVideoUpload}\n            palette={selectedPalette}\n            onPaletteChange={(newPalette) => {\n                setSelectedPalette(newPalette);\n                setLoadingState(isAsciiVideo);\n                updateAscii({\n                    palette: newPalette,\n                    isColorInverted,\n                    resolution: specs.resolution,\n                    file: currentFile,\n                    isVideo: isAsciiVideo,\n                    brightness,\n                    contrast,\n                    resetLookups: false,\n                });\n            }}\n            isColorInverted={isColorInverted}\n            onColorInvertedToggle={() => {\n                setInvert(!isColorInverted);\n                setLoadingState(isAsciiVideo);\n                updateAscii({\n                    palette: selectedPalette,\n                    isColorInverted: !isColorInverted,\n                    resolution: specs.resolution,\n                    file: currentFile,\n                    isVideo: isAsciiVideo,\n                    brightness,\n                    contrast,\n                    resetLookups: false,\n                });\n            }}\n            contrast={contrast}\n            onContrastChange={debouncedOnContrastChange}\n            brightness={brightness}\n            onBrightnessChange={debouncedOnBrightnessChange}\n            isVideoEditMode={Boolean(videoForEditMode)}\n            onClickGenerateVideo={() => {\n                if (videoForEditMode) {\n                    setIsAsciiVideo(true);\n                    setLoadingState(true);\n\n                    updateAscii({\n                        palette: selectedPalette,\n                        isColorInverted,\n                        resolution: specs.resolution,\n                        file: videoForEditMode,\n                        isVideo: true,\n                        contrast,\n                        brightness,\n                        resetLookups: true,\n                    });\n                    setCurrentFile(videoForEditMode);\n                    setVideoForEditMode(undefined);\n                }\n            }}\n        />\n    );\n};\n","import React from 'react';\n\nexport const AsciiVideo = ({\n    asciiFrames,\n    frameRate = 10,\n}: {\n    asciiFrames: string[];\n    // the frame rate to play the video at (has nothing to do with video creation)\n    frameRate?: number;\n}): JSX.Element | null => {\n    if (asciiFrames.length == 0) {\n        return null;\n    }\n    const [currentFrameIndex, setCurrentFrameIndex] = React.useState(0);\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setCurrentFrameIndex((prevIndex) => (prevIndex + 1) % asciiFrames.length);\n        }, 1000 / frameRate);\n\n        return () => clearInterval(interval);\n    }, [asciiFrames.length, frameRate]);\n\n    return <div>{asciiFrames[currentFrameIndex]}</div>;\n};\n","import './index.css';\nimport React from 'react';\nimport { MenuContainer as Menu } from './ui/Menu/Menu';\nimport { AsciiVideo } from './video/asciiVideo';\n\n//rewrite as enum?\n\nexport const Fonts = [\n    'Ibm Plex Mono',\n    'Azeret Mono',\n    'Space Mono',\n    'Roboto Mono',\n    'Courier New',\n    'Monaco',\n    'Arial',\n    'Helvetica',\n];\n\nexport type Font = (typeof Fonts)[number];\n\nexport interface SpecsState {\n    fontSize: number;\n    resolution: number;\n    width: number;\n    zoom: number;\n    weight: number;\n    fontFamily: Font;\n    kerning: number;\n    lineHeight: number;\n}\n\nconst App: React.FC = () => {\n    const [ascii, setAscii] = React.useState<string | string[]>('');\n    const [specs, setSpecs] = React.useState<SpecsState>({\n        fontSize: 30,\n        resolution: 100,\n        width: 700,\n        zoom: 1,\n        weight: 400,\n        fontFamily: 'Ibm Plex Mono',\n        kerning: 0,\n        lineHeight: 1,\n    });\n    console.log('specs', specs);\n\n    const lineHeight = 1000 / specs.resolution;\n    console.log('ascii', ascii.slice(0, 100));\n\n    return (\n        <div className=\"flex-container\">\n            <Menu\n                specs={specs}\n                onSpecsChange={(specs: SpecsState) => setSpecs(specs)}\n                onAsciiChange={(ascii: string | string[]) => setAscii(ascii)}\n                onCopy={() => {\n                    navigator.clipboard.writeText(\n                        typeof ascii === 'string' ? ascii : JSON.stringify(ascii),\n                    );\n                }}\n            />\n            <pre>\n                <div\n                    className=\"ascii\"\n                    style={{\n                        fontSize: `${lineHeight * 1 * specs.zoom}px`,\n                        lineHeight: `${lineHeight * specs.zoom}px`,\n                        fontWeight: specs.weight,\n                        fontFamily: specs.fontFamily,\n                        letterSpacing: `${specs.kerning}px`,\n                    }}>\n                    {ascii !== '' ? (\n                        typeof ascii === 'string' ? (\n                            ascii\n                        ) : (\n                            <AsciiVideo asciiFrames={ascii} />\n                        )\n                    ) : (\n                        '((-.-)/^'\n                    )}\n                </div>\n            </pre>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}