{"version":3,"sources":["ascii-utils.tsx","Slider.tsx","SliderSection.tsx","PaletteDropdown.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["resizeImage","settings","file","maxWidth","reader","FileReader","image","Image","canvas","document","createElement","Promise","ok","no","type","match","onload","readerEvent","width","height","context","getContext","drawImage","resize","src","target","result","readAsDataURL","Error","Slider","title","onChange","label","value","min","max","step","className","SliderSection","specs","onSpecsChange","onResolutionChange","event","newZoom","parseFloat","zoom","fontSize","toString","slice","resolution","newWeight","weight","ASCIICHARS","PaletteDropdown","selectedOption","onOptionChange","htmlFor","id","newOption","map","char","index","initialState","App","React","useState","ascii","setAscii","currentFile","setCurrentFile","setSpecs","palette","setPalette","invert","setInvert","imageFile","newResolution","then","newAscii","asciiChars","inverse","data","getImageData","pixels","y","x","pixelIndex","luminance","asciiIndex","Math","floor","length","getAsciiFromCanvas","newFontSize","debounceOnresolutionChange","debounce","accept","myFile","files","option","checked","onClick","navigator","clipboard","writeText","style","lineHeight","fontWeight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.941a2751.chunk.js","sourcesContent":["// const asciiChars = '+::`..';\n// const asciiChars =\n//     '$@WgBMQNR8%0&đD#OGKEHdbmSqpAPwU54ZX96f23kVhaeFCj1IoJyst7}{YnulzriTx?][*Lcv×<>)(/+=÷“”!;:‘,’-.';\n\n// const asciiChars = '▓▒▒░░';\n// const asciiChars = ['8 ', 'M ', '0 ', '# ', '$ ', '| ', '* ', '+ ', ': ', ': ', '` ', '. ', '. '];\n\n// const asciiChars = '$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~<>i!lI;:,\"^`\\'.';\n// const asciiChars = '+-:`  ';\n['8 ', 'M ', '0 ', '# ', '$ ', '| ', '* ', '+ ', ': ', ': ', '` ', '. ', '. '];\n\n// export const ASCIICHARS = [\n//     '8M0|*|::`,.',\n//     '+::`..',\n//     '+-:`  ',\n//     '▓▒▒░░',\n//     '$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~<>i!lI;:,\"^`\\'.',\n//     '$@WgBMQNR8%0&đD#OGKEHdbmSqpAPwU54ZX96f23kVhaeFCj1IoJyst7}{YnulzriTx?][*Lcv×<>)(/+=÷“”!;:‘,’-.',\n// ];\n\n// const asciiChars = '8M0#$|*|::`,.';\n// const asciiChars = '#8?0+:.,';\n// const asciiChars = '8#|:.';\n\nexport const getAsciiFromCanvas = (\n    canvas: HTMLCanvasElement,\n    asciiChars: string,\n    inverse = false,\n): string => {\n    const context = canvas.getContext('2d');\n    const data = context?.getImageData(0, 0, canvas.width, canvas.height);\n\n    if (!data) {\n        return '';\n    }\n\n    const pixels = data.data;\n\n    let ascii = '';\n    for (let y = 0; y < data.height; y++) {\n        for (let x = 0; x < data.width; x++) {\n            const pixelIndex = (y * data.width + x) * 4;\n            const luminance =\n                (pixels[pixelIndex] + pixels[pixelIndex + 1] + pixels[pixelIndex + 2]) / 3;\n            const asciiIndex = Math.floor((luminance / 255) * (asciiChars.length - 1));\n            if (inverse) {\n                ascii += asciiChars[asciiChars.length - asciiIndex - 1];\n            } else {\n                ascii += asciiChars[asciiIndex];\n            }\n        }\n        ascii += '\\n';\n    }\n    return ascii;\n};\n\ninterface IResizeImageOptions {\n    maxWidth: number;\n    file: File;\n}\nexport const resizeImage = (settings: IResizeImageOptions): Promise<HTMLCanvasElement> => {\n    const file = settings.file;\n    const maxWidth = settings.maxWidth;\n    const reader = new FileReader();\n    const image = new Image();\n    const canvas = document.createElement('canvas');\n\n    const resize = () => {\n        let width = image.width;\n        let height = image.height;\n\n        if (width > maxWidth) {\n            height *= maxWidth / width;\n            width = maxWidth;\n        }\n        height *= 0.6;\n\n        canvas.width = width;\n        canvas.height = height;\n        const context = canvas.getContext('2d');\n        context?.drawImage(image, 0, 0, width, height);\n        return canvas;\n    };\n\n    return new Promise<HTMLCanvasElement>((ok, no) => {\n        if (!file.type.match(/image.*/)) {\n            no(new Error('Not an image'));\n            return;\n        }\n\n        reader.onload = (readerEvent: any) => {\n            image.onload = () => ok(resize());\n            image.src = readerEvent.target.result;\n        };\n        reader.readAsDataURL(file);\n    });\n};\n","import React from 'react';\n\ninterface SliderProps {\n    title: string;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    label: string;\n    // eslint-disable-next-line\n    value: any;\n    min: number;\n    max: number;\n    step?: number;\n}\n\nexport const Slider: React.FC<SliderProps> = ({\n    title,\n    onChange,\n    label,\n    value,\n    min,\n    max,\n    step,\n}) => {\n    return (\n        <div className=\"slidecontainer\">\n            <p>{title}</p>\n            <input\n                type=\"range\"\n                min={min}\n                max={max}\n                className=\"slider\"\n                value={value}\n                onChange={onChange}\n                step={step}\n            />\n            <output>{label}</output>\n        </div>\n    );\n};\n","import { Slider } from './Slider';\nimport React from 'react';\nimport { SpecsState } from './App';\n\nexport const SliderSection: React.FC<{\n    specs: SpecsState;\n    onSpecsChange: (specs: SpecsState) => void;\n    onResolutionChange: (resolution: number) => void;\n}> = ({ specs, onSpecsChange, onResolutionChange }) => {\n    return (\n        <>\n            <Slider\n                title={'zoom:'}\n                onChange={(event) => {\n                    const newZoom = parseFloat(event.target.value);\n                    onSpecsChange({ ...specs, zoom: newZoom });\n                }}\n                value={specs.zoom}\n                min={1}\n                max={10}\n                step={0.25}\n                label={specs.fontSize.toString().slice(0, 4)}\n            />\n\n            <Slider\n                title={'resolution:'}\n                onChange={(event) => {\n                    const resolution = parseFloat(event.target.value);\n                    onResolutionChange(resolution);\n                }}\n                value={specs.resolution}\n                min={5}\n                max={500}\n                label={specs.resolution.toString().slice(0, 5)}\n            />\n\n            <Slider\n                title={'weight:'}\n                onChange={(event) => {\n                    const newWeight = parseFloat(event.target.value);\n                    onSpecsChange({ ...specs, weight: newWeight });\n                }}\n                value={specs.weight}\n                min={0}\n                max={800}\n                label={specs.weight.toString()}\n            />\n        </>\n    );\n};\n","import React from 'react';\n\nexport const ASCIICHARS = [\n    '8M0|*|::`,.',\n    'M80*|:,.` ',\n    '$H2a?+.   ',\n    '8+::`..',\n    '+-:`  ',\n    '▓▒▒░░ ',\n    '$@WgBMQNR8%0&đD#OGKEHdbmSqpAPwU54ZX96f23kVhaeFCj1IoJyst7}{YnulzriTx?][*Lcv×<>)(/+=÷“”!;:‘,’-.',\n    ['8 ', 'M ', '0 ', '# ', '$ ', '| ', '* ', '+ ', ': ', ': ', '` ', '. ', '. '],\n];\n\ninterface PaletteDropdownProps {\n    selectedOption: string | string[];\n    onOptionChange: (option: string | string[]) => void;\n}\n\nconst PaletteDropdown: React.FC<PaletteDropdownProps> = ({ selectedOption, onOptionChange }) => {\n    const handleOptionChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        const newOption = event.target.value;\n        onOptionChange(newOption);\n    };\n\n    return (\n        <div className=\"menu-entry\">\n            <label htmlFor=\"options\">palette:</label>\n            <select\n                id=\"options\"\n                value={selectedOption}\n                onChange={handleOptionChange}\n                className=\"dropdown\">\n                <option value=\"\">--Please choose an option--</option>\n                {ASCIICHARS.map((char, index) => (\n                    <option key={index} value={char}>\n                        {char}\n                    </option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport default PaletteDropdown;\n","import './index.css';\nimport React from 'react';\nimport debounce from 'lodash.debounce';\nimport { resizeImage, getAsciiFromCanvas } from './ascii-utils';\nimport { SliderSection } from './SliderSection';\nimport PaletteDropdown, { ASCIICHARS } from './PaletteDropdown';\n\nconst ARTWIDTH = 700;\n\nexport interface SpecsState {\n    fontSize: number;\n    resolution: number;\n    width: number;\n    zoom: number;\n    weight: number;\n}\n\nconst initialState = {\n    fontSize: 30,\n    resolution: 100,\n    width: ARTWIDTH,\n    zoom: 1,\n    weight: 400,\n};\n\nconst App: React.FC = () => {\n    const [ascii, setAscii] = React.useState('');\n    const [currentFile, setCurrentFile] = React.useState<File>();\n    const [specs, setSpecs] = React.useState<SpecsState>(initialState);\n\n    const [palette, setPalette] = React.useState<string | string[]>(ASCIICHARS[0]);\n\n    const [invert, setInvert] = React.useState(false);\n\n    const onResolutionChange = (\n        imageFile: File,\n        newResolution: number,\n        palette: string,\n        invert: boolean,\n    ) => {\n        resizeImage({\n            file: imageFile,\n            maxWidth: newResolution,\n        }).then((canvas) => {\n            const newAscii = getAsciiFromCanvas(canvas, palette, invert);\n            const newFontSize = specs.width / newResolution;\n\n            setSpecs({\n                ...specs,\n                fontSize: newFontSize,\n                resolution: newResolution,\n            });\n            setAscii(newAscii);\n        });\n    };\n\n    const debounceOnresolutionChange = debounce(\n        (file: File, resolution, palette, invert) =>\n            onResolutionChange(file, resolution, palette, invert),\n        0,\n    );\n\n    return (\n        <div className=\"flex-container\">\n            <div className=\"menu\">\n                <div className=\"menu-entry\">\n                    <label htmlFor=\"file-upload\" className=\"clickable-button\">\n                        Upload an image\n                    </label>\n                    <input\n                        id=\"file-upload\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={(event) => {\n                            const myFile = event.target.files?.[0];\n                            if (!myFile) {\n                                return;\n                            }\n                            setCurrentFile(myFile);\n                            debounceOnresolutionChange(\n                                myFile,\n                                initialState.resolution,\n                                palette,\n                                invert,\n                            );\n                        }}\n                    />\n                </div>\n                <SliderSection\n                    specs={specs}\n                    onSpecsChange={(specs) => {\n                        setSpecs(specs);\n                    }}\n                    onResolutionChange={(resolution) => {\n                        if (!currentFile) {\n                            return;\n                        }\n                        debounceOnresolutionChange(currentFile, resolution, palette, invert);\n                    }}\n                />\n                <PaletteDropdown\n                    selectedOption={palette}\n                    onOptionChange={(option) => {\n                        if (!currentFile) {\n                            return;\n                        }\n                        debounceOnresolutionChange(currentFile, specs.resolution, option, invert);\n                        setPalette(option);\n                    }}\n                />\n\n                <form>\n                    <div className=\"checkboxes\">\n                        <label>\n                            <input\n                                type=\"checkbox\"\n                                checked={invert}\n                                onChange={() => {\n                                    if (!currentFile) {\n                                        return;\n                                    }\n                                    debounceOnresolutionChange(\n                                        currentFile,\n                                        specs.resolution,\n                                        palette,\n                                        !invert,\n                                    );\n                                    setInvert(!invert);\n                                }}\n                            />\n                            {'inverse?'}\n                        </label>\n                    </div>\n                </form>\n\n                <div className=\"menu-entry\">\n                    <label htmlFor=\"clipboard-button\" className=\"clickable-button\">\n                        Save to clipboard\n                    </label>\n\n                    <button\n                        id=\"clipboard-button\"\n                        className=\"hidden-button\"\n                        onClick={() => {\n                            navigator.clipboard.writeText(ascii);\n                        }}>\n                        {'save to clipboard'}\n                    </button>\n                </div>\n            </div>\n            <pre>\n                <div\n                    className=\"ascii\"\n                    style={{\n                        fontSize: `${specs.zoom * specs.fontSize}px`,\n                        lineHeight: 1,\n                        fontWeight: specs.weight,\n                    }}>{`${ascii}`}</div>\n            </pre>\n        </div>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}